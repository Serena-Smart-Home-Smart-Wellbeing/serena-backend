{
	"info": {
		"_postman_id": "c2ca6570-36b5-44ec-a844-562730b862c7",
		"name": "Serena Backend",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Users API",
			"item": [
				{
					"name": "Register User",
					"item": [
						{
							"name": "400 No Email",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9b89ccda-888e-41e5-b8a0-806feb1c0ba0",
										"exec": [
											"pm.test(\"reject 400 if no email\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.expect(pm.response.json()).to.haveOwnProperty(\r",
											"        \"message\",\r",
											"        \"Missing email\"\r",
											"    );\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "ce5941f5-7c07-4d3b-b479-3e39b79a5ef6",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"Rey\",\r\n    \"password\": \"meowmeowmoewmoew\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{HOST}}/users"
							},
							"response": []
						},
						{
							"name": "400 No Username",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "039d7cc6-f75f-4423-ad61-956c4860b2ef",
										"exec": [
											"pm.test(\"reject 400 if no username\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.expect(pm.response.json()).to.haveOwnProperty(\r",
											"        \"message\",\r",
											"        \"Missing username\"\r",
											"    );\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "30d57e0c-807b-4c6a-8bb4-de72d59c3a85",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"rey@gmail.com\",\r\n    \"password\": \"meowmeowmoewmoew\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{HOST}}/users"
							},
							"response": []
						},
						{
							"name": "400 No Password",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8b1f17c1-2619-48af-9699-66e43d1b4e0f",
										"exec": [
											"pm.test(\"reject 400 if no password\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.expect(pm.response.json()).to.haveOwnProperty(\r",
											"        \"message\",\r",
											"        \"Missing password\"\r",
											"    );\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "ed42f4ab-dc36-46f0-ace3-b895893f45c9",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"Rey\",\r\n    \"email\": \"rey@gmail.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{HOST}}/users"
							},
							"response": []
						},
						{
							"name": "400 Password invalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b745f43a-afb4-4f8c-adfa-e6569da3c050",
										"exec": [
											"pm.test(\"reject 400 if password is not valid\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.expect(pm.response.json()).to.haveOwnProperty(\r",
											"        \"message\",\r",
											"        \"Password must be at least 8 characters long\"\r",
											"    );\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "fefc2b8a-4d03-4d16-b311-6d98913f5a00",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": {{VALID_USER_NAME}},\r\n    \"email\": {{VALID_USER_EMAIL}},\r\n    \"password\": \"w\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{HOST}}/users"
							},
							"response": []
						},
						{
							"name": "201 Valid User",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "0ba660d0-fc9b-484a-b1ec-5d078ec20069",
										"exec": [
											"const userId = pm.environment.get(\"USER_ID\");\r",
											"const url = `${pm.environment.get(\"HOST\")}/users/${userId}`;\r",
											"const accessToken = pm.environment.get(\"ACCESS_TOKEN\");\r",
											"const Authorization = `Bearer ${accessToken}`\r",
											"\r",
											"console.log(userId);\r",
											"\r",
											"pm.sendRequest(\r",
											"    {\r",
											"        method: \"DELETE\",\r",
											"        url,\r",
											"        header: {\r",
											"            Authorization\r",
											"        }\r",
											"    },\r",
											"    function (err, response) {\r",
											"        const res = response.json();\r",
											"        if (err || res.status) {\r",
											"            console.error(err);\r",
											"            console.error(res);\r",
											"        } else {\r",
											"            console.log(\"Deleted User: \" + userId);\r",
											"            console.log(res)\r",
											"        }\r",
											"    }\r",
											");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "bfb36906-cefc-4d54-b26d-fcaedf02aaf7",
										"exec": [
											"pm.test(\"respond 201 if user successfuly created\", () => {\r",
											"    pm.response.to.have.status(201);\r",
											"    \r",
											"});\r",
											"\r",
											"pm.test(\"respond with accessToken and userId if registered successfuly\", () => {\r",
											"    const res = pm.response.json();\r",
											"    pm.expect(res.accessToken).to.be.a(\"string\");\r",
											"    pm.expect(res.userId).to.be.a(\"string\");\r",
											"    pm.environment.set(\"ACCESS_TOKEN\", res.accessToken)\r",
											"    pm.environment.set(\"USER_ID\", res.userId)\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "1fbca16d-2d9f-4d58-bb55-4ce9c8731e96",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": {{VALID_USER_NAME}},\r\n    \"email\": {{VALID_USER_EMAIL}},\r\n    \"password\": {{VALID_USER_PASSWORD}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{HOST}}/users"
							},
							"response": []
						},
						{
							"name": "409 Existing User",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f15721e3-19b2-4d7c-84fd-fafff9f36fff",
										"exec": [
											"pm.test(\"reject 409 if user already exists\", () => {\r",
											"    pm.response.to.have.status(409);\r",
											"    pm.expect(pm.response.json()).to.haveOwnProperty(\"message\", \"User already exists\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "e79401d1-ce78-4585-834b-cbc9654e2c9e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": {{VALID_USER_NAME}},\r\n    \"email\": {{VALID_USER_EMAIL}},\r\n    \"password\": {{VALID_USER_PASSWORD}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{HOST}}/users"
							},
							"response": []
						}
					],
					"id": "d660dfa6-98cd-4659-81fb-89f8eabade36"
				},
				{
					"name": "Login",
					"item": [
						{
							"name": "400 No Email",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b12379b4-c22e-44f9-862e-7ce07c71f3df",
										"exec": [
											"pm.test(\"reject 400 if no email\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.expect(pm.response.json()).to.haveOwnProperty(\r",
											"        \"message\",\r",
											"        \"Missing email\"\r",
											"    );\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "6881a945-775d-414c-805f-43d17b73ba39",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": {{VALID_USER_NAME}},\r\n    \"password\": {{VALID_USER_PASSWORD}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{HOST}}/users/login"
							},
							"response": []
						},
						{
							"name": "400 No Password",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ec28092f-883c-44e1-9684-757773fd2c84",
										"exec": [
											"pm.test(\"reject 400 if no password\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.expect(pm.response.json()).to.haveOwnProperty(\r",
											"        \"message\",\r",
											"        \"Missing password\"\r",
											"    );\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "aceb48af-27de-43f8-a729-655a6d91c0fa",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": {{VALID_USER_NAME}},\r\n    \"email\": {{VALID_USER_EMAIL}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{HOST}}/users/login"
							},
							"response": []
						},
						{
							"name": "401 Wrong Credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "768ab091-4b73-45a9-9066-eae722aaba4d",
										"exec": [
											"pm.test(\"reject 401 if wrong email/password\", () => {\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.expect(pm.response.json()).to.haveOwnProperty(\r",
											"        \"message\",\r",
											"        \"Wrong email/password\"\r",
											"    );\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "376fe828-bee0-4f4b-8334-159fde50165c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": {{VALID_USER_NAME}},\r\n    \"email\": {{VALID_USER_EMAIL}},\r\n    \"password\": \"WRONGPASSWORDDDD\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{HOST}}/users/login"
							},
							"response": []
						},
						{
							"name": "404 Nonexisting User",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "313f1a1a-f248-48af-abd5-cfb1b1514d02",
										"exec": [
											"pm.test(\"reject 404 if user doesn't exist\", () => {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.expect(pm.response.json()).to.haveOwnProperty(\r",
											"        \"message\",\r",
											"        \"User not found\"\r",
											"    );\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "ca01cbab-89a2-4775-a7a6-5a4c57c0ceb8",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": {{VALID_USER_NAME}},\r\n    \"email\": \"NONEXISTING_USER@GMAIL.COMMMM\",\r\n    \"password\": {{VALID_USER_PASSWORD}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{HOST}}/users/login"
							},
							"response": []
						},
						{
							"name": "200 Login Successful",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b65760e3-1c15-44d7-83e8-962e4825f1f5",
										"exec": [
											"pm.test(\"response contains accessToken and userId\", ()  => {\r",
											"    const res = pm.response.json();\r",
											"    pm.expect(res.accessToken).to.be.a(\"string\");\r",
											"    pm.expect(res.userId).to.be.a(\"string\");\r",
											"    pm.environment.set(\"ACCESS_TOKEN\", res.accessToken)\r",
											"    pm.environment.set(\"USER_ID\", res.userId)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "a5a39949-5771-4fe2-a367-14db65315ab4",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": {{VALID_USER_NAME}},\r\n    \"email\": {{VALID_USER_EMAIL}},\r\n    \"password\": {{VALID_USER_PASSWORD}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{HOST}}/users/login"
							},
							"response": []
						}
					],
					"id": "51502829-529b-4583-a404-bcaa2eeb2689"
				},
				{
					"name": "Get User Data",
					"item": [
						{
							"name": "401 Invalid Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8f23af56-dd4b-421e-aeaf-030f0345bff7",
										"exec": [
											"pm.test(\"reject 401 if no token provided in Authorization header\", () => {\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.expect(pm.response.json()).to.haveOwnProperty(\"message\", \"Invalid token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "d4c0b9ca-e1e4-4463-862e-7ed4700664a6",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "meow.meow.meow"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{HOST}}/users/{{USER_ID}}"
							},
							"response": []
						},
						{
							"name": "403 Forbidden",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "6b623ca2-3d1d-47c2-aba7-b837b11c737a",
										"exec": [
											"const secondUserCreds = {\r",
											"    email: \"test_second_user@test.com\",\r",
											"    username: \"test_second_user\",\r",
											"    password: \"12345678\"\r",
											"};\r",
											"\r",
											"pm.sendRequest(\r",
											"    {\r",
											"        method: \"POST\",\r",
											"        url: `${pm.environment.get(\"HOST\")}/users`,\r",
											"        body: {\r",
											"            mode: \"raw\",\r",
											"            raw: JSON.stringify(secondUserCreds)\r",
											"        },\r",
											"        header: {\r",
											"            \"Content-Type\": \"application/json\"\r",
											"        }\r",
											"    },\r",
											"    function (err, response) {\r",
											"        if (err) {\r",
											"            console.log(err);\r",
											"        } else {\r",
											"            const res = response.json();\r",
											"\r",
											"            if (res.accessToken && res.userId) {\r",
											"                console.log(\"Registered User\");\r",
											"\r",
											"                pm.environment.set(\"SECOND_ACCESS_TOKEN\", res.accessToken);\r",
											"                pm.environment.set(\"SECOND_USER_ID\", res.userId);\r",
											"            } else {\r",
											"                pm.sendRequest(\r",
											"                    {\r",
											"                        method: \"POST\",\r",
											"                        url: `${pm.environment.get(\"HOST\")}/users/login`,\r",
											"                        body: {\r",
											"                            mode: \"raw\",\r",
											"                            raw: JSON.stringify(secondUserCreds)\r",
											"                        },\r",
											"                        header: {\r",
											"                            \"Content-Type\": \"application/json\"\r",
											"                        }\r",
											"                    },\r",
											"                    (err, response) => {\r",
											"                        console.log(\"Logged In\");\r",
											"                        if (err) {\r",
											"                            console.log(err);\r",
											"                        } else {\r",
											"                            const res = response.json();\r",
											"                            if (res.status) return console.log(res);\r",
											"\r",
											"                            pm.environment.set(\r",
											"                                \"SECOND_ACCESS_TOKEN\",\r",
											"                                res.accessToken\r",
											"                            );\r",
											"                            pm.environment.set(\"SECOND_USER_ID\", res.userId);\r",
											"                        }\r",
											"                    }\r",
											"                );\r",
											"            }\r",
											"        }\r",
											"    }\r",
											");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "8c092b06-e075-4ef5-9998-ba882cec17ee",
										"exec": [
											"pm.test(\"reject 403 when using a token that doesn't correspond to the user id in the path parameter\", () => {\r",
											"    pm.response.to.have.status(403);\r",
											"    pm.expect(pm.response.json()).to.haveOwnProperty(\"message\", \"Forbidden\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "f0e61474-8d02-4d34-b0cd-a03bd0ee9e66",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{SECOND_ACCESS_TOKEN}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{HOST}}/users/{{USER_ID}}"
							},
							"response": []
						},
						{
							"name": "404 Nonexisting User",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1263e8ea-f35f-4487-82c1-d9d2a076d4b1",
										"exec": [
											"pm.test(\"reject 404 if user does not exist\", () => {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.expect(pm.response.json()).to.haveOwnProperty(\"message\", \"User not found\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "9c446686-f414-480d-a996-9e0efd68917e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{ACCESS_TOKEN}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{HOST}}/users/DEOSNTEXISTTT"
							},
							"response": []
						},
						{
							"name": "200 Existing User",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "730d94a0-54a3-43ee-a2ba-3150d72e07b1",
										"exec": [
											"pm.test(\"return user if exists\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"    const res = pm.response.json();\r",
											"    pm.expect(res.id).to.be.a(\"string\");\r",
											"    pm.expect(res.email).to.be.a(\"string\");\r",
											"    pm.expect(res.username).to.be.a(\"string\");\r",
											"    pm.expect(res.image_name).to.be.a(\"string\").and.match(/^https:\\/\\/storage\\.googleapis\\.com\\/serena-app-storage/);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "8109dc22-2cb2-4906-87e2-677e2eec7569",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{ACCESS_TOKEN}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{HOST}}/users/{{USER_ID}}"
							},
							"response": []
						}
					],
					"id": "9525c6d3-4ea7-46d6-9d29-a572160c1972"
				},
				{
					"name": "Delete User",
					"item": [
						{
							"name": "401 No Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ca6112f3-87dd-4e86-afb0-03e34c1b42e9",
										"exec": [
											"pm.test(\"reject 400 if no token provided in Authorization header\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.expect(pm.response.json()).to.haveOwnProperty(\"message\", \"Missing token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "a14c79b1-12b8-41a7-94ed-dfb4f965a175",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [],
								"url": "{{HOST}}/users/{{USER_ID}}"
							},
							"response": []
						},
						{
							"name": "401 Invalid Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0fc135da-9d1f-4009-8001-1207e83ca61f",
										"exec": [
											"pm.test(\"reject 401 if no token provided in Authorization header\", () => {\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.expect(pm.response.json()).to.haveOwnProperty(\"message\", \"Invalid token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "f7f618d2-85d5-41fb-a0e3-711795a671d7",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "meow.meow.meow"
									}
								},
								"method": "DELETE",
								"header": [],
								"url": "{{HOST}}/users/{{USER_ID}}"
							},
							"response": []
						},
						{
							"name": "403 Forbidden",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "7b17b2d5-b429-494a-b5eb-607ed4b88806",
										"exec": [
											"const secondUserCreds = {\r",
											"    email: \"test_second_user@test.com\",\r",
											"    username: \"test_second_user\",\r",
											"    password: \"12345678\"\r",
											"};\r",
											"\r",
											"pm.sendRequest(\r",
											"    {\r",
											"        method: \"POST\",\r",
											"        url: `${pm.environment.get(\"HOST\")}/users`,\r",
											"        body: {\r",
											"            mode: \"raw\",\r",
											"            raw: JSON.stringify(secondUserCreds)\r",
											"        },\r",
											"        header: {\r",
											"            \"Content-Type\": \"application/json\"\r",
											"        }\r",
											"    },\r",
											"    function (err, response) {\r",
											"        if (err) {\r",
											"            console.log(err);\r",
											"        } else {\r",
											"            const res = response.json();\r",
											"\r",
											"            if (res.accessToken && res.userId) {\r",
											"                console.log(\"Registered User\");\r",
											"\r",
											"                pm.environment.set(\"SECOND_ACCESS_TOKEN\", res.accessToken);\r",
											"                pm.environment.set(\"SECOND_USER_ID\", res.userId);\r",
											"            } else {\r",
											"                pm.sendRequest(\r",
											"                    {\r",
											"                        method: \"POST\",\r",
											"                        url: `${pm.environment.get(\"HOST\")}/users/login`,\r",
											"                        body: {\r",
											"                            mode: \"raw\",\r",
											"                            raw: JSON.stringify(secondUserCreds)\r",
											"                        },\r",
											"                        header: {\r",
											"                            \"Content-Type\": \"application/json\"\r",
											"                        }\r",
											"                    },\r",
											"                    (err, response) => {\r",
											"                        console.log(\"Logged In\");\r",
											"                        if (err) {\r",
											"                            console.log(err);\r",
											"                        } else {\r",
											"                            const res = response.json();\r",
											"                            if (res.status) return console.log(res);\r",
											"\r",
											"                            pm.environment.set(\r",
											"                                \"SECOND_ACCESS_TOKEN\",\r",
											"                                res.accessToken\r",
											"                            );\r",
											"                            pm.environment.set(\"SECOND_USER_ID\", res.userId);\r",
											"                                \r",
											"                             \r",
											"                        }\r",
											"                    }\r",
											"                );\r",
											"            }\r",
											"        }\r",
											"    }\r",
											");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b7e69a9e-1146-4209-a078-30a7a9a5fd7b",
										"exec": [
											"pm.test(\"reject 403 when using a token that doesn't correspond to the user id in the path parameter\", () => {\r",
											"    pm.response.to.have.status(403);\r",
											"    pm.expect(pm.response.json()).to.haveOwnProperty(\"message\", \"Forbidden\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "347de86d-59eb-467a-bbc7-1a057a97977b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{SECOND_ACCESS_TOKEN}}"
									}
								},
								"method": "DELETE",
								"header": [],
								"url": "{{HOST}}/users/{{USER_ID}}"
							},
							"response": []
						},
						{
							"name": "200 Existing User",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f5f5ae17-3cce-4039-a7f4-822d1be0a719",
										"exec": [
											"const toBeDeletedUserCred = {\r",
											"    email: \"DELETE_MEEEEE@test.com\",\r",
											"    username: \"DELETE_MEEEEE\",\r",
											"    password: \"12345678\"\r",
											"};\r",
											"\r",
											"pm.sendRequest(\r",
											"    {\r",
											"        method: \"POST\",\r",
											"        url: `${pm.environment.get(\"HOST\")}/users`,\r",
											"        body: {\r",
											"            mode: \"raw\",\r",
											"            raw: JSON.stringify(toBeDeletedUserCred)\r",
											"        },\r",
											"        header: {\r",
											"            \"Content-Type\": \"application/json\"\r",
											"        }\r",
											"    },\r",
											"    function (err, response) {\r",
											"        if (err) {\r",
											"            console.log(err);\r",
											"        } else {\r",
											"            const res = response.json();\r",
											"\r",
											"            console.log(\"Registered User\");\r",
											"\r",
											"            pm.environment.set(\"DELETED_USER_ACCESS_TOKEN\", res.accessToken);\r",
											"            pm.environment.set(\"DELETED_USER_ID\", res.userId);\r",
											"        }\r",
											"    }\r",
											");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "cf7827d2-98e6-4d1f-8e94-f09842e9b9f4",
										"exec": [
											"pm.test(\"return user if successfully deleted\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"    const res = pm.response.json();\r",
											"    pm.expect(res.id).to.be.a(\"string\");\r",
											"    pm.expect(res.email).to.be.a(\"string\");\r",
											"    pm.expect(res.username).to.be.a(\"string\");\r",
											"    pm.expect(res.image_name).to.be.a(\"string\").and.match(/^https:\\/\\/storage\\.googleapis\\.com\\/serena-app-storage/);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "7b7a9e14-cb40-42c2-984f-63738b7515cd",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{DELETED_USER_ACCESS_TOKEN}}"
									}
								},
								"method": "DELETE",
								"header": [],
								"url": "{{HOST}}/users/{{DELETED_USER_ID}}"
							},
							"response": []
						},
						{
							"name": "404 Nonexisting User",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4749078a-56de-485a-92b6-6120f0303605",
										"exec": [
											"pm.test(\"reject 404 if user does not exist\", () => {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.expect(pm.response.json()).to.haveOwnProperty(\"message\", \"User not found\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "0284153d-65eb-48da-8d8d-23f3c07ca115",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{ACCESS_TOKEN}}"
									}
								},
								"method": "DELETE",
								"header": [],
								"url": "{{HOST}}/users/DOESNTTTEXISTTTT"
							},
							"response": []
						}
					],
					"id": "c7c3537a-fad7-4bf1-8e67-1964102c7cac"
				}
			],
			"id": "36005b71-c3ff-4160-9afa-023b2aa6567c",
			"auth": {
				"type": "inherit",
				"inherit": {}
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "b5487335-09ab-4488-a6a3-fe312088b011",
						"exec": [
							"// pm.sendRequest(\r",
							"//     {\r",
							"//         method: \"DELETE\",\r",
							"//         url: `${pm.environment.get(\"HOST\")}/users/${pm.environment.get(\"USER_ID\")}`\r",
							"//     },\r",
							"//     function (err, response) {\r",
							"//         console.log(\"Deleting user!\")\r",
							"//         if (err) {\r",
							"//             console.error(err);\r",
							"//         } else {\r",
							"//             console.log(response.json());\r",
							"//         }\r",
							"//     }\r",
							"// );\r",
							""
						],
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "SerenPlace API",
			"item": [
				{
					"name": "Get Products",
					"item": [
						{
							"name": "200 Get All Products",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "629b20e8-152b-4966-af57-56e328054f71",
										"exec": [
											"pm.test(\"return SerenPlace products\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"    const res = pm.response.json();\r",
											"\r",
											"    pm.expect(res).to.be.a(\"array\");\r",
											"    res.forEach(product => {\r",
											"        pm.expect(product).to.have.keys(\r",
											"            \"id\",\r",
											"            \"name\",\r",
											"            \"price_idr\",\r",
											"            \"stock\",\r",
											"            \"image_name\",\r",
											"            \"description\",\r",
											"            \"type\"\r",
											"        );\r",
											"        pm.expect(product.image_name).to.be.a(\"string\").and.match(/^https:\\/\\/storage\\.googleapis\\.com\\/serena-app-storage/);\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "fa99b96a-8a69-44d8-b817-0e792fa6556f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{HOST}}/serenplace"
							},
							"response": []
						},
						{
							"name": "200 Get existing product",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d9bb8150-7fd5-494c-90b8-5de28692a07c",
										"exec": [
											"pm.test(\"return an existing SerenPlace product\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"    const product = pm.response.json();\r",
											"\r",
											"    pm.expect(product).to.have.keys(\r",
											"        \"id\",\r",
											"        \"name\",\r",
											"        \"price_idr\",\r",
											"        \"stock\",\r",
											"        \"image_name\",\r",
											"        \"description\",\r",
											"        \"type\"\r",
											"    );\r",
											"\r",
											"    pm.expect(product.image_name).to.be.a(\"string\").and.match(/^https:\\/\\/storage\\.googleapis\\.com\\/serena-app-storage/);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "ea1eee88-67c8-44d9-8da0-967538fb5e7d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{HOST}}/serenplace/{{PRODUCT_ID}}"
							},
							"response": []
						},
						{
							"name": "404 Get nonexisting product",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dbdfdd1e-8378-4077-8700-26d6becefc9f",
										"exec": [
											"pm.test(\"reject 404 if product does not exist\", () => {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.expect(pm.response.json()).to.haveOwnProperty(\"message\", \"Product not found\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "a5cb0129-49ca-4909-9eb5-504d1cfc01c0",
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{HOST}}/serenplace/DOES_NOT_EXIST2847487"
							},
							"response": []
						}
					],
					"id": "652cbac2-3bee-4b67-aef4-bdcdf41ef1ff"
				}
			],
			"id": "cfea6c0d-35aa-4404-8b01-8cc10924ec99"
		},
		{
			"name": "Music Recommender API",
			"item": [
				{
					"name": "200 Recommend music",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4e72e802-d9f1-446b-8112-da9f338a22e9",
								"exec": [
									"pm.test(\"return music recommendations\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    const musicRecommendations = pm.response.json();\r",
									"\r",
									"    pm.expect(musicRecommendations).to.be.a(\"array\");\r",
									"    musicRecommendations.forEach(musicRecommendation => {\r",
									"        pm.expect(musicRecommendation).to.have.keys(\r",
									"            \"id\",\r",
									"            \"title\",\r",
									"            \"artist\",\r",
									"            \"album\",\r",
									"            \"release_year\",\r",
									"            \"cover_image\",\r",
									"            \"preview_link\"\r",
									"        );\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "2862e5ce-f445-437b-a507-11d5e4d3706c",
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/music-recommender?energetic=0.7&relax=0.3",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"music-recommender"
							],
							"query": [
								{
									"key": "energetic",
									"value": "0.7",
									"type": "text",
									"id": 0
								},
								{
									"key": "relax",
									"value": "0.3",
									"type": "text",
									"id": 1
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400 No energetic",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e6d788d8-9eb9-43f1-9297-a71dc456bb1b",
								"exec": [
									"pm.test(\"rejects if no energetic parameter provided\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.expect(pm.response.json()).to.haveOwnProperty(\"message\", \"Missing energetic\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "4067a40a-d541-41ae-a013-2295b9543dfc",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST}}/music-recommender?relax=0.3",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"music-recommender"
							],
							"query": [
								{
									"key": "energetic",
									"value": "0.7",
									"type": "text",
									"id": 0,
									"disabled": true
								},
								{
									"key": "relax",
									"value": "0.3",
									"type": "text",
									"id": 1
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400 No relax",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b1cee204-4e5f-4562-b0bc-b36dd9a04888",
								"exec": [
									"pm.test(\"rejects if no relax parameter provided\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.expect(pm.response.json()).to.haveOwnProperty(\"message\", \"Missing relax\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "a06c5b89-f863-4eec-a0fb-35db745fd967",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST}}/music-recommender?energetic=0.7",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"music-recommender"
							],
							"query": [
								{
									"key": "energetic",
									"value": "0.7",
									"type": "text",
									"id": 0
								},
								{
									"key": "relax",
									"value": "0.3",
									"type": "text",
									"id": 1,
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400 Energetic + relax !== 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "50532988-328f-47e2-af85-6d0709925212",
								"exec": [
									"pm.test(\"rejects if energetic + relax is not 1\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.expect(pm.response.json()).to.haveOwnProperty(\"message\", \"Energetic + relax must be 1\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "fa28d70b-66bd-4302-9c93-28ce5604425b",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST}}/music-recommender?energetic=1&relax=1",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"music-recommender"
							],
							"query": [
								{
									"key": "energetic",
									"value": "1",
									"type": "text",
									"id": 0
								},
								{
									"key": "relax",
									"value": "1",
									"type": "text",
									"id": 1
								}
							]
						}
					},
					"response": []
				}
			],
			"id": "58e9b62c-668f-49d1-846b-2dd51b2af4d5"
		},
		{
			"name": "SerenBox API",
			"item": [
				{
					"name": "Add SerenBox",
					"item": [
						{
							"name": "400 Missing credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "77fa13b0-981c-4638-af46-d1269b91e49b",
										"exec": [
											"pm.test(\"Fail adding SerenBox if missing credentials\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.expect(pm.response.json()).to.haveOwnProperty(\"message\", \"Missing credentials\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "b1c7309b-4d1c-46d6-8467-cb9f47accac0",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\":\"My SerenBox\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{HOST}}/devices/serenbox"
							},
							"response": []
						},
						{
							"name": "400 Missing name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1a3223d0-1f0c-4b61-8717-d0d87e2541e5",
										"exec": [
											"pm.test(\"Fail adding SerenBox if missing name\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.expect(pm.response.json()).to.haveOwnProperty(\"message\", \"Missing name\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "2059c40f-57d3-41c2-b784-e157a3863320",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"credentials\": \"00:0a:95:9d:68:16\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{HOST}}/devices/serenbox"
							},
							"response": []
						},
						{
							"name": "401 Invalid Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "01d32229-7756-4020-bc3b-5ef3820c139c",
										"exec": [
											"pm.test(\"Reject if token is invalid\", () => {\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.expect(pm.response.json()).to.haveOwnProperty(\"message\", \"Invalid token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "deaaf4a7-1fd5-477e-9157-e293ccf6fe7a",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "meow.meow.meow"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"credentials\": \"00:0a:95:9d:68:16\",\r\n    \"name\":\"My SerenBox\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{HOST}}/devices/serenbox"
							},
							"response": []
						},
						{
							"name": "201 Add new SerenBox",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ca0254bb-df11-4b28-b70f-58dac175c3c7",
										"exec": [
											"pm.test(\"Added new SerenBox\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    const serenbox = pm.response.json();\r",
											"\r",
											"    pm.expect(serenbox.credentials).to.be.equal(\"00:0a:95:9d:68:16\");\r",
											"    pm.expect(serenbox.name).to.be.equal(\"My SerenBox\");\r",
											"    pm.expect(serenbox).to.have.keys(\r",
											"        \"credentials\",\r",
											"        \"name\",\r",
											"        \"id\",\r",
											"        \"userId\",\r",
											"        \"added\",\r",
											"        \"slotAId\",\r",
											"        \"slotBId\",\r",
											"        \"image_name\",\r",
											"        \"ip_address\"\r",
											"    );\r",
											"    pm.environment.set(\"SERENBOX_ID\", serenbox.id)\r",
											"    pm.environment.set(\"SERENBOX_CREDENTIALS\", serenbox.credentials)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "9963e3b3-2d0f-47ea-b4b4-5656c06ee2d8",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"credentials\": \"00:0a:95:9d:68:16\",\r\n    \"name\":\"My SerenBox\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{HOST}}/devices/serenbox"
							},
							"response": []
						},
						{
							"name": "409 Add SerenBox with duplicate credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d8872768-2feb-4e47-a4e4-e8cff6234336",
										"exec": [
											"pm.test(\"Fail adding SerenBox if another SerenBox with the same credentials exists\", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"    pm.expect(pm.response.json()).to.haveOwnProperty(\"message\", \"SerenBox already exists\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "942ed7e0-3c88-431a-a958-adc262421167",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"credentials\": \"00:0a:95:9d:68:16\",\r\n    \"name\":\"My SerenBox\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{HOST}}/devices/serenbox"
							},
							"response": []
						}
					],
					"id": "d9705545-27e5-4c0c-ac80-d1f8f7de513a"
				},
				{
					"name": "Get SerenBox data",
					"item": [
						{
							"name": "200 Existing SerenBox",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "55efaf38-dd07-491a-a11a-05acd1d7c5bb",
										"exec": [
											"pm.test(\"Return an existing SerenBox\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"    const res = pm.response.json();\r",
											"\r",
											"    pm.expect(res).to.have.keys(\r",
											"        \"credentials\",\r",
											"        \"name\",\r",
											"        \"id\",\r",
											"        \"userId\",\r",
											"        \"added\",\r",
											"        \"slotAId\",\r",
											"        \"slotBId\",\r",
											"        \"image_name\",\r",
											"        \"ip_address\"\r",
											"    );\r",
											"\r",
											"     pm.environment.set(\"SERENBOX_ID\", res.id)\r",
											"    pm.environment.set(\"SERENBOX_CREDENTIALS\", res.credentials)\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "257c4585-3e9b-45ba-a22d-70b9f7191565",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{HOST}}/devices/serenbox/{{SERENBOX_ID}}"
							},
							"response": []
						},
						{
							"name": "200 Current User's SerenBoxes",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "02cd7773-06d8-42a2-a402-8ff2a8b127e2",
										"exec": [
											"pm.test(\"Return current user's SerenBoxes\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"    const res = pm.response.json();\r",
											"\r",
											"    pm.expect(res).to.be.a(\"array\");\r",
											"    res.forEach(res => {\r",
											"        const currentUserId = pm.environment.get(\"USER_ID\");\r",
											"        pm.expect(res.userId).to.be.equal(currentUserId);\r",
											"        pm.expect(res).to.have.keys(\r",
											"            \"credentials\",\r",
											"            \"name\",\r",
											"            \"id\",\r",
											"            \"userId\",\r",
											"            \"added\",\r",
											"            \"slotAId\",\r",
											"            \"slotBId\",\r",
											"            \"image_name\",\r",
											"            \"ip_address\"\r",
											"        );\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "889c5de0-9d9a-4029-8275-a17a0ed99c17",
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{HOST}}/devices/serenbox"
							},
							"response": []
						},
						{
							"name": "401 Invalid Token for gettting one SerenBox",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9b6b7b27-8b7f-4df8-9d0b-7fc0aa11c6f5",
										"exec": [
											"pm.test(\"Reject if token is invalid\", () => {\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.expect(pm.response.json()).to.haveOwnProperty(\"message\", \"Invalid token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "d63656df-127b-4d07-a986-3920d70fe52c",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "meow.meow.meow"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{HOST}}/devices/serenbox/{{SERENBOX_ID}}"
							},
							"response": []
						},
						{
							"name": "401 Invalid Token for gettting multiple SerenBoxes",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3ffe571c-e2c2-4fed-aa5d-8810266fe672",
										"exec": [
											"pm.test(\"Reject if token is invalid\", () => {\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.expect(pm.response.json()).to.haveOwnProperty(\"message\", \"Invalid token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "4e27642b-f8be-40ea-bbb6-397a9a46c7b6",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "meow.meow.meow"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{HOST}}/devices/serenbox"
							},
							"response": []
						},
						{
							"name": "403 Forbidden",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9a9926bf-c599-406d-a027-4b67da5a4bd6",
										"exec": [
											"pm.test(\"Reject if access token doesn't match SerenBox's userId\", () => {\r",
											"    pm.response.to.have.status(403);\r",
											"    pm.expect(pm.response.json()).to.haveOwnProperty(\"message\", \"Forbidden\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "5a1f5920-a162-419a-b841-df3fe9a4f10e",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{SECOND_ACCESS_TOKEN}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{HOST}}/devices/serenbox/{{SERENBOX_ID}}"
							},
							"response": []
						},
						{
							"name": "404 Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "11bfaf0f-1b66-44f3-8ff2-4c6e0781e45f",
										"exec": [
											"pm.test(\"Reject if SerenBox not found\", () => {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.expect(pm.response.json()).to.haveOwnProperty(\"message\", \"SerenBox not found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "800b190b-278d-472c-9679-f44015a8e36a",
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{HOST}}/devices/serenbox/MEOWMEOWMOEMOMOWMOW"
							},
							"response": []
						}
					],
					"id": "36750398-ba49-43d5-b450-54885e813797"
				},
				{
					"name": "Get SerenBox slot status",
					"item": [
						{
							"name": "200 Available SerenBox",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "db81bea7-94df-4134-bc14-2b25cd5bf266",
										"exec": [
											"pm.test(\"Return an available existing SerenBox slots status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"    const res = pm.response.json();\r",
											"\r",
											"    pm.expect(res).to.have.keys(\r",
											"        \"serenBoxId\",\r",
											"        \"slotA\",\r",
											"        \"slotB\"\r",
											"    );\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "8dcf1356-5d18-435f-8ae2-766c2a2a4297",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{HOST}}/devices/serenbox/{{SERENBOX_CREDENTIALS}}/slots"
							},
							"response": []
						},
						{
							"name": "404 Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0aa222e8-1f51-4597-98c5-f6649bca86dc",
										"exec": [
											"pm.test(\"Reject if SerenBox not found\", () => {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.expect(pm.response.json()).to.haveOwnProperty(\"message\", \"SerenBox not found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "028d4097-f0f9-4002-bdcd-d1adb64cf0de",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{HOST}}/devices/serenbox/MEOMOEMOEMOEMEOEMO/slots"
							},
							"response": []
						}
					],
					"id": "d21ba2f3-fc80-417b-8be4-397656bc87b7"
				},
				{
					"name": "Update SerenBox IP Address",
					"item": [
						{
							"name": "200 Ok update IP address",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e0760b30-013f-4572-9dd6-95a4b22b37df",
										"exec": [
											"pm.test(\"Ok update IP address\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    const serenbox = pm.response.json();\r",
											"\r",
											"    pm.expect(serenbox.ip_address).to.be.equal(\"192.192.192.192\");\r",
											"    pm.expect(serenbox).to.have.keys(\r",
											"        \"credentials\",\r",
											"        \"name\",\r",
											"        \"id\",\r",
											"        \"userId\",\r",
											"        \"added\",\r",
											"        \"slotAId\",\r",
											"        \"slotBId\",\r",
											"        \"image_name\",\r",
											"        \"ip_address\"\r",
											"    );\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "c1da2ef2-c031-41f4-9784-b60f2c8570b1",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ip_address\":  \"192.192.192.192\",\r\n    \"credentials\": \"00:0a:95:9d:68:16\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{HOST}}/devices/serenbox"
							},
							"response": []
						},
						{
							"name": "400 Missing credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6cf6edaf-c4f0-41ab-a4ce-9e1ac3a55926",
										"exec": [
											"pm.test(\"Fail update SerenBox if missing credentials\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.expect(pm.response.json()).to.haveOwnProperty(\"message\", \"Missing credentials\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "73970717-aefa-45e3-9589-22a7c729650d",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ip_address\":  \"192.0.31.34\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{HOST}}/devices/serenbox"
							},
							"response": []
						},
						{
							"name": "400 Missing ip_address",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1c7fd115-3364-4bd8-aff8-7f70d78ea5d8",
										"exec": [
											"pm.test(\"Fail update SerenBox if missing ip_address\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.expect(pm.response.json()).to.haveOwnProperty(\"message\", \"Missing ip_address\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "8a2f26df-95d6-41f6-a262-daa818720220",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"credentials\": \"00:0a:95:9d:68:16\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{HOST}}/devices/serenbox"
							},
							"response": []
						},
						{
							"name": "404 Credentials not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2c76f011-e93e-49bc-a39e-b4180405b1c2",
										"exec": [
											"pm.test(\"Fail update SerenBox if not found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.expect(pm.response.json()).to.haveOwnProperty(\"message\", \"SerenBox not found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "222f4728-f4a3-43e6-87de-792f119e11d3",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ip_address\":  \"192.0.31.34\",\r\n    \"credentials\": \"NOTFOUNDDDDDD\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{HOST}}/devices/serenbox"
							},
							"response": []
						}
					],
					"id": "ffed042b-55f8-483c-ab2c-ec946e75efdc"
				},
				{
					"name": "Update diffuser slot status",
					"item": [
						{
							"name": "200 Successfully updated slot A status to true",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e0426b7b-0b1b-4c52-a305-3dbd1f89dcd8",
										"exec": [
											"pm.test(\"Slot A status is true\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    const res = pm.response.json();\r",
											"\r",
											"    pm.expect(res).to.have.keys(\r",
											"        \"serenBoxId\",\r",
											"        \"slotA\",\r",
											"        \"slotB\"\r",
											"    );\r",
											"\r",
											"    pm.expect(res.slotA).to.be.equal(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "52a39009-75da-4f44-9fd3-a487b94dafda",
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"is_active\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{HOST}}/devices/serenbox/{{SERENBOX_ID}}/slots/A"
							},
							"response": []
						},
						{
							"name": "200 Successfully updated slot A status to false",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b4af3d4a-1537-418b-9c65-bfef175955be",
										"exec": [
											"pm.test(\"Slot A status is false\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    const res = pm.response.json();\r",
											"\r",
											"    pm.expect(res).to.have.keys(\r",
											"        \"serenBoxId\",\r",
											"        \"slotA\",\r",
											"        \"slotB\"\r",
											"    );\r",
											"\r",
											"    pm.expect(res.slotA).to.be.equal(false);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "6c4b8ba8-2a76-419d-972f-e1d0ed93c33d",
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"is_active\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{HOST}}/devices/serenbox/{{SERENBOX_ID}}/slots/A"
							},
							"response": []
						},
						{
							"name": "200 Successfully updated slot B status to true",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5f943f5b-4dc9-40ec-9fbc-2e1dc5e54a03",
										"exec": [
											"pm.test(\"Slot B status is true\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    const res = pm.response.json();\r",
											"\r",
											"    pm.expect(res).to.have.keys(\r",
											"        \"serenBoxId\",\r",
											"        \"slotA\",\r",
											"        \"slotB\"\r",
											"    );\r",
											"\r",
											"    pm.expect(res.slotB).to.be.equal(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "9668bf35-e31c-44dc-b69e-93eee02bd2d5",
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"is_active\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{HOST}}/devices/serenbox/{{SERENBOX_ID}}/slots/B"
							},
							"response": []
						},
						{
							"name": "200 Successfully updated slot B status to false",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "36494485-a4f6-473e-9436-29181bf9381a",
										"exec": [
											"pm.test(\"Slot B status is false\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    const res = pm.response.json();\r",
											"\r",
											"    pm.expect(res).to.have.keys(\r",
											"        \"serenBoxId\",\r",
											"        \"slotA\",\r",
											"        \"slotB\"\r",
											"    );\r",
											"\r",
											"    pm.expect(res.slotB).to.be.equal(false);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "d1b3f68a-2397-4a6c-a1b0-f957f3016fb0",
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"is_active\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{HOST}}/devices/serenbox/{{SERENBOX_ID}}/slots/B"
							},
							"response": []
						},
						{
							"name": "400 Wrong slot option",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "42014825-b851-4d8e-90bb-04e1ab265ebe",
										"exec": [
											"pm.test(\"Slot option is wrong\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.expect(pm.response.json()).to.haveOwnProperty(\"message\", \"Wrong slot option\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "c2bc66c6-5061-4b9c-8079-d869c687d846",
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"is_active\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{HOST}}/devices/serenbox/{{SERENBOX_ID}}/slots/Z"
							},
							"response": []
						},
						{
							"name": "401 Invalid Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b7ffda14-d79b-4c7d-afad-133badfe6eaf",
										"exec": [
											"pm.test(\"Reject if token is invalid\", () => {\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.expect(pm.response.json()).to.haveOwnProperty(\"message\", \"Invalid token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "83441359-7c47-4686-a3d7-2e5c7e902783",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "meow.meow.meow"
									}
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"is_active\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{HOST}}/devices/serenbox/{{SERENBOX_ID}}/slots/B"
							},
							"response": []
						},
						{
							"name": "403 Forbidden",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8becf43f-a61d-4044-88c5-713b2f1193e9",
										"exec": [
											"pm.test(\"Reject if access token doesn't match SerenBox's userId\", () => {\r",
											"    pm.response.to.have.status(403);\r",
											"    pm.expect(pm.response.json()).to.haveOwnProperty(\"message\", \"Forbidden\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "d49b12da-380d-4625-ae5e-1b7632da6ed6",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{SECOND_ACCESS_TOKEN}}"
									}
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"is_active\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{HOST}}/devices/serenbox/{{SERENBOX_ID}}/slots/B"
							},
							"response": []
						},
						{
							"name": "404 Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7a26d4da-4588-4ffb-881c-1993b508f8f0",
										"exec": [
											"pm.test(\"Reject if SerenBox not found\", () => {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.expect(pm.response.json()).to.haveOwnProperty(\"message\", \"SerenBox not found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "6d3eaa99-9ecc-4c03-80df-2315c2031215",
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"is_active\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{HOST}}/devices/serenbox/NOTFOUNDDDD/slots/B"
							},
							"response": []
						}
					],
					"id": "3c1c22c6-0567-432a-a84c-2e4a863b76ec"
				},
				{
					"name": "Create SerenBox session",
					"item": [
						{
							"name": "201 Created SerenBox session",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "48df967b-d716-449a-a815-f5e7c6f3fbc7",
										"exec": [
											"pm.test(\"Created new SerenBox session\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    const res = pm.response.json();\r",
											"    \r",
											"    pm.expect(res).to.have.keys(\r",
											"        \"duration_minutes\",\r",
											"        \"detection_mode\",\r",
											"        \"diffusion_option\",\r",
											"        \"id\",\r",
											"        \"serenBoxId\",\r",
											"        \"start_time\",\r",
											"        \"end_time\",\r",
											"        \"is_running\",\r",
											"        \"slotAId\",\r",
											"        \"slotBId\"\r",
											"    );\r",
											"\r",
											"    pm.expect(res.duration_minutes).to.be.equal(10);\r",
											"    pm.expect(res.detection_mode).to.be.equal(\"INTERVAL\");\r",
											"    pm.expect(res.diffusion_option).to.be.equal(\"MATCH_MOOD\");\r",
											"\r",
											"    pm.environment.set(\"SESSION_ID\", res.id)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "f37fb752-fb80-4ba0-b48d-e6211a2cc2fc",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"duration_minutes\": 10,\r\n    \"detection_mode\": \"INTERVAL\",\r\n    \"diffusion_option\": \"MATCH_MOOD\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{HOST}}/devices/serenbox/{{SERENBOX_ID}}/sessions"
							},
							"response": []
						},
						{
							"name": "401 Invalid Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6d719057-dcd1-4df0-97b9-2bf3c67b9c5c",
										"exec": [
											"pm.test(\"Reject if token is invalid\", () => {\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.expect(pm.response.json()).to.haveOwnProperty(\"message\", \"Invalid token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "00933b7f-9929-4db9-86b9-1c59015cb738",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "meow.meow.meow"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"duration_minutes\": 10,\r\n    \"detection_mode\": \"INTERVAL\",\r\n    \"diffusion_option\": \"MATCH_MOOD\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{HOST}}/devices/serenbox/{{SERENBOX_ID}}/sessions"
							},
							"response": []
						},
						{
							"name": "403 Forbidden",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ced14e86-e401-460f-877f-9e580948995f",
										"exec": [
											"pm.test(\"Reject if access token doesn't match SerenBox's userId\", () => {\r",
											"    pm.response.to.have.status(403);\r",
											"    pm.expect(pm.response.json()).to.haveOwnProperty(\"message\", \"Forbidden\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "f6c50a82-d5ca-4708-8140-688dcbaf685d",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{SECOND_ACCESS_TOKEN}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"duration_minutes\": 10,\r\n    \"detection_mode\": \"INTERVAL\",\r\n    \"diffusion_option\": \"MATCH_MOOD\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{HOST}}/devices/serenbox/{{SERENBOX_ID}}/sessions"
							},
							"response": []
						},
						{
							"name": "404 SerenBox Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2071795d-8d8f-4e52-8e73-c302b481e158",
										"exec": [
											"pm.test(\"Reject if SerenBox not found\", () => {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.expect(pm.response.json()).to.haveOwnProperty(\"message\", \"SerenBox not found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "c0a845cc-10c8-4a18-9e0e-d476bceeeb59",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"duration_minutes\": 10,\r\n    \"detection_mode\": \"INTERVAL\",\r\n    \"diffusion_option\": \"MATCH_MOOD\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{HOST}}/devices/serenbox/NOTHINGGGG/sessions"
							},
							"response": []
						},
						{
							"name": "400 Missing duration_minutes",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0065e021-2a20-4562-9890-402ff81b9519",
										"exec": [
											"pm.test(\"Reject if missing duration_minutes\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.expect(pm.response.json()).to.haveOwnProperty(\"message\", \"Missing duration_minutes\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "7d6ff394-9655-41de-8256-020278d261cf",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"detection_mode\": \"INTERVAL\",\r\n    \"diffusion_option\": \"MATCH_MOOD\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{HOST}}/devices/serenbox/{{SERENBOX_ID}}/sessions"
							},
							"response": []
						},
						{
							"name": "400 Missing detection_mode",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1a693da8-c941-4c91-836f-2695d7f2a17d",
										"exec": [
											"pm.test(\"Reject if missing detection_mode\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.expect(pm.response.json()).to.haveOwnProperty(\"message\", \"Missing detection_mode\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "52eb0b81-8ad5-408f-a820-55f5c7b528b5",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"duration_minutes\": 10,\r\n    \"diffusion_option\": \"MATCH_MOOD\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{HOST}}/devices/serenbox/{{SERENBOX_ID}}/sessions"
							},
							"response": []
						},
						{
							"name": "400 Missing diffusion_option",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7836f744-e702-422b-8bce-7d24966e4342",
										"exec": [
											"pm.test(\"Reject if missing diffusion_option\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.expect(pm.response.json()).to.haveOwnProperty(\"message\", \"Missing diffusion_option\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "92d2a147-08eb-4cc3-8dcb-e81f16d5dad0",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"duration_minutes\": 10,\r\n    \"detection_mode\": \"INTERVAL\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{HOST}}/devices/serenbox/{{SERENBOX_ID}}/sessions"
							},
							"response": []
						}
					],
					"id": "0573565a-f3be-4861-80b7-da282b9b2b20",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "03acd11b-29ca-41ed-b6d8-4c6b1be833ec",
								"exec": [
									"const secondUserCreds = {\r",
									"    email: \"test_second_user@test.com\",\r",
									"    username: \"test_second_user\",\r",
									"    password: \"12345678\"\r",
									"};\r",
									"\r",
									"pm.sendRequest(\r",
									"    {\r",
									"        method: \"POST\",\r",
									"        url: `${pm.environment.get(\"HOST\")}/users`,\r",
									"        body: {\r",
									"            mode: \"raw\",\r",
									"            raw: JSON.stringify(secondUserCreds)\r",
									"        },\r",
									"        header: {\r",
									"            \"Content-Type\": \"application/json\"\r",
									"        }\r",
									"    },\r",
									"    function (err, response) {\r",
									"        if (err) {\r",
									"            console.log(err);\r",
									"        } else {\r",
									"            const res = response.json();\r",
									"\r",
									"            if (res.accessToken && res.userId) {\r",
									"                console.log(\"Registered User\");\r",
									"\r",
									"                pm.environment.set(\"SECOND_ACCESS_TOKEN\", res.accessToken);\r",
									"                pm.environment.set(\"SECOND_USER_ID\", res.userId);\r",
									"            } else {\r",
									"                pm.sendRequest(\r",
									"                    {\r",
									"                        method: \"POST\",\r",
									"                        url: `${pm.environment.get(\"HOST\")}/users/login`,\r",
									"                        body: {\r",
									"                            mode: \"raw\",\r",
									"                            raw: JSON.stringify(secondUserCreds)\r",
									"                        },\r",
									"                        header: {\r",
									"                            \"Content-Type\": \"application/json\"\r",
									"                        }\r",
									"                    },\r",
									"                    (err, response) => {\r",
									"                        console.log(\"Logged In\");\r",
									"                        if (err) {\r",
									"                            console.log(err);\r",
									"                        } else {\r",
									"                            const res = response.json();\r",
									"                            if (res.status) return console.log(res);\r",
									"\r",
									"                            pm.environment.set(\r",
									"                                \"SECOND_ACCESS_TOKEN\",\r",
									"                                res.accessToken\r",
									"                            );\r",
									"                            pm.environment.set(\"SECOND_USER_ID\", res.userId);\r",
									"                        }\r",
									"                    }\r",
									"                );\r",
									"            }\r",
									"        }\r",
									"    }\r",
									");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Get SerenBox session",
					"item": [
						{
							"name": "200 Existing SerenBox session",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c5c30a3b-f402-4908-a051-baf3d0ec2473",
										"exec": [
											"pm.test(\"Get existing SerenBox session\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    const res = pm.response.json();\r",
											"    \r",
											"    pm.expect(res).to.have.keys(\r",
											"        \"duration_minutes\",\r",
											"        \"detection_mode\",\r",
											"        \"diffusion_option\",\r",
											"        \"id\",\r",
											"        \"serenBoxId\",\r",
											"        \"start_time\",\r",
											"        \"end_time\",\r",
											"        \"is_running\",\r",
											"        \"slotAId\",\r",
											"        \"slotBId\"\r",
											"    );\r",
											"\r",
											"    pm.environment.set(\"SESSION_ID\", res.id)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "8a37735c-e002-4e54-9b65-39140f73866c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{HOST}}/devices/serenbox/{{SERENBOX_ID}}/sessions/{{SESSION_ID}}"
							},
							"response": []
						},
						{
							"name": "401 Invalid Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b7cfe90b-e4dc-4638-807a-edd75c581eba",
										"exec": [
											"pm.test(\"Reject if token is invalid\", () => {\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.expect(pm.response.json()).to.haveOwnProperty(\"message\", \"Invalid token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "896cfc73-0b4e-49ea-95ff-d75548f0b300",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "meow.meow.meow"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{HOST}}/devices/serenbox/{{SERENBOX_ID}}/sessions/{{SESSION_ID}}"
							},
							"response": []
						},
						{
							"name": "403 Forbidden",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "90645be8-6b43-4dca-9929-823446e4fcbd",
										"exec": [
											"pm.test(\"Reject if access token doesn't match SerenBox's userId\", () => {\r",
											"    pm.response.to.have.status(403);\r",
											"    pm.expect(pm.response.json()).to.haveOwnProperty(\"message\", \"Forbidden\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "e39ef248-17f1-43a0-9a06-a7b5e576af08",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{SECOND_ACCESS_TOKEN}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{HOST}}/devices/serenbox/{{SERENBOX_ID}}/sessions/{{SESSION_ID}}"
							},
							"response": []
						},
						{
							"name": "404 SerenBox Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ec510ec1-66b0-47a8-9a29-2edeca083018",
										"exec": [
											"pm.test(\"Reject if SerenBox not found\", () => {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.expect(pm.response.json()).to.haveOwnProperty(\"message\", \"SerenBox not found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "b78a990c-cf3c-4364-9cd9-bd4b4d0d8888",
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{HOST}}/devices/serenbox/NOTHINGGGG/sessions/{{SESSION_ID}}"
							},
							"response": []
						},
						{
							"name": "404 SerenBox session Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dfcf8187-a314-49bf-b9d7-af40ced2a4eb",
										"exec": [
											"pm.test(\"Reject if SerenBox session not found\", () => {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.expect(pm.response.json()).to.haveOwnProperty(\"message\", \"SerenBox session not found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "3670f05c-d650-4ec2-b308-3ec12202f3b3",
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{HOST}}/devices/serenbox/{{SERENBOX_ID}}/sessions/NOTHINGGGG"
							},
							"response": []
						}
					],
					"id": "2c3e1a8c-2cb8-432b-8655-f52a461a0e80",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "03acd11b-29ca-41ed-b6d8-4c6b1be833ec",
								"exec": [
									"const secondUserCreds = {\r",
									"    email: \"test_second_user@test.com\",\r",
									"    username: \"test_second_user\",\r",
									"    password: \"12345678\"\r",
									"};\r",
									"\r",
									"pm.sendRequest(\r",
									"    {\r",
									"        method: \"POST\",\r",
									"        url: `${pm.environment.get(\"HOST\")}/users`,\r",
									"        body: {\r",
									"            mode: \"raw\",\r",
									"            raw: JSON.stringify(secondUserCreds)\r",
									"        },\r",
									"        header: {\r",
									"            \"Content-Type\": \"application/json\"\r",
									"        }\r",
									"    },\r",
									"    function (err, response) {\r",
									"        if (err) {\r",
									"            console.log(err);\r",
									"        } else {\r",
									"            const res = response.json();\r",
									"\r",
									"            if (res.accessToken && res.userId) {\r",
									"                console.log(\"Registered User\");\r",
									"\r",
									"                pm.environment.set(\"SECOND_ACCESS_TOKEN\", res.accessToken);\r",
									"                pm.environment.set(\"SECOND_USER_ID\", res.userId);\r",
									"            } else {\r",
									"                pm.sendRequest(\r",
									"                    {\r",
									"                        method: \"POST\",\r",
									"                        url: `${pm.environment.get(\"HOST\")}/users/login`,\r",
									"                        body: {\r",
									"                            mode: \"raw\",\r",
									"                            raw: JSON.stringify(secondUserCreds)\r",
									"                        },\r",
									"                        header: {\r",
									"                            \"Content-Type\": \"application/json\"\r",
									"                        }\r",
									"                    },\r",
									"                    (err, response) => {\r",
									"                        console.log(\"Logged In\");\r",
									"                        if (err) {\r",
									"                            console.log(err);\r",
									"                        } else {\r",
									"                            const res = response.json();\r",
									"                            if (res.status) return console.log(res);\r",
									"\r",
									"                            pm.environment.set(\r",
									"                                \"SECOND_ACCESS_TOKEN\",\r",
									"                                res.accessToken\r",
									"                            );\r",
									"                            pm.environment.set(\"SECOND_USER_ID\", res.userId);\r",
									"                        }\r",
									"                    }\r",
									"                );\r",
									"            }\r",
									"        }\r",
									"    }\r",
									");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Finish SerenBox session",
					"item": [
						{
							"name": "200 Existing SerenBox session",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1a463c1b-5937-48c4-9253-57023560fc20",
										"exec": [
											"pm.test(\"Finish an existing SerenBox session\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    const res = pm.response.json();\r",
											"    \r",
											"    pm.expect(res).to.have.keys(\r",
											"        \"duration_minutes\",\r",
											"        \"detection_mode\",\r",
											"        \"diffusion_option\",\r",
											"        \"id\",\r",
											"        \"serenBoxId\",\r",
											"        \"start_time\",\r",
											"        \"end_time\",\r",
											"        \"is_running\",\r",
											"        \"slotAId\",\r",
											"        \"slotBId\"\r",
											"    );\r",
											"    pm.expect(res.is_running).to.equal(false);\r",
											"\r",
											"    const regex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/;\r",
											"    pm.expect(res.end_time).to.match(regex);\r",
											"\r",
											"    pm.environment.set(\"SESSION_ID\", res.id)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "088cbb18-b188-4aba-bb2e-76ce1e426e3e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{HOST}}/devices/serenbox/{{SERENBOX_ID}}/sessions/{{SESSION_ID}}/finish"
							},
							"response": []
						},
						{
							"name": "401 Invalid Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "da450e6d-435d-408a-8a38-b12f86a096ac",
										"exec": [
											"pm.test(\"Reject if token is invalid\", () => {\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.expect(pm.response.json()).to.haveOwnProperty(\"message\", \"Invalid token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "78106efe-7f16-479e-9c53-68cedeaf2fe1",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "meow.meow.meow"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{HOST}}/devices/serenbox/{{SERENBOX_ID}}/sessions/{{SESSION_ID}}/finish"
							},
							"response": []
						},
						{
							"name": "403 Forbidden",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a8711eb6-37ff-476a-8c7b-35b799aba46e",
										"exec": [
											"pm.test(\"Reject if access token doesn't match SerenBox's userId\", () => {\r",
											"    pm.response.to.have.status(403);\r",
											"    pm.expect(pm.response.json()).to.haveOwnProperty(\"message\", \"Forbidden\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "5155ce83-41b3-45ce-8e56-043c12dab171",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{SECOND_ACCESS_TOKEN}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{HOST}}/devices/serenbox/{{SERENBOX_ID}}/sessions/{{SESSION_ID}}/finish"
							},
							"response": []
						},
						{
							"name": "404 SerenBox Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f68b6158-701e-496a-b245-98cbbc18b7fe",
										"exec": [
											"pm.test(\"Reject if SerenBox not found\", () => {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.expect(pm.response.json()).to.haveOwnProperty(\"message\", \"SerenBox not found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "9566c8f5-2c0f-4e7e-b530-12608b25a080",
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{HOST}}/devices/serenbox/NOTHINGGGG/sessions/{{SESSION_ID}}/finish"
							},
							"response": []
						},
						{
							"name": "404 SerenBox session Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f70fd852-516e-43c8-b9f3-76007e64553c",
										"exec": [
											"pm.test(\"Reject if SerenBox session not found\", () => {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.expect(pm.response.json()).to.haveOwnProperty(\"message\", \"SerenBox session not found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "c3397bb9-3864-429a-ba3a-62d7d6fc4b40",
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{HOST}}/devices/serenbox/{{SERENBOX_ID}}/sessions/NOTHINGGGG/finish"
							},
							"response": []
						}
					],
					"id": "abf4c4a1-0a50-4b5f-9509-a2df6c827d68",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "03acd11b-29ca-41ed-b6d8-4c6b1be833ec",
								"exec": [
									"const secondUserCreds = {\r",
									"    email: \"test_second_user@test.com\",\r",
									"    username: \"test_second_user\",\r",
									"    password: \"12345678\"\r",
									"};\r",
									"\r",
									"pm.sendRequest(\r",
									"    {\r",
									"        method: \"POST\",\r",
									"        url: `${pm.environment.get(\"HOST\")}/users`,\r",
									"        body: {\r",
									"            mode: \"raw\",\r",
									"            raw: JSON.stringify(secondUserCreds)\r",
									"        },\r",
									"        header: {\r",
									"            \"Content-Type\": \"application/json\"\r",
									"        }\r",
									"    },\r",
									"    function (err, response) {\r",
									"        if (err) {\r",
									"            console.log(err);\r",
									"        } else {\r",
									"            const res = response.json();\r",
									"\r",
									"            if (res.accessToken && res.userId) {\r",
									"                console.log(\"Registered User\");\r",
									"\r",
									"                pm.environment.set(\"SECOND_ACCESS_TOKEN\", res.accessToken);\r",
									"                pm.environment.set(\"SECOND_USER_ID\", res.userId);\r",
									"            } else {\r",
									"                pm.sendRequest(\r",
									"                    {\r",
									"                        method: \"POST\",\r",
									"                        url: `${pm.environment.get(\"HOST\")}/users/login`,\r",
									"                        body: {\r",
									"                            mode: \"raw\",\r",
									"                            raw: JSON.stringify(secondUserCreds)\r",
									"                        },\r",
									"                        header: {\r",
									"                            \"Content-Type\": \"application/json\"\r",
									"                        }\r",
									"                    },\r",
									"                    (err, response) => {\r",
									"                        console.log(\"Logged In\");\r",
									"                        if (err) {\r",
									"                            console.log(err);\r",
									"                        } else {\r",
									"                            const res = response.json();\r",
									"                            if (res.status) return console.log(res);\r",
									"\r",
									"                            pm.environment.set(\r",
									"                                \"SECOND_ACCESS_TOKEN\",\r",
									"                                res.accessToken\r",
									"                            );\r",
									"                            pm.environment.set(\"SECOND_USER_ID\", res.userId);\r",
									"                        }\r",
									"                    }\r",
									"                );\r",
									"            }\r",
									"        }\r",
									"    }\r",
									");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Delete SerenBox",
					"item": [
						{
							"name": "401 Invalid Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "20ee9106-fd04-4a7c-a6fd-6970f8bf50b4",
										"exec": [
											"pm.test(\"Reject if token is invalid\", () => {\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.expect(pm.response.json()).to.haveOwnProperty(\"message\", \"Invalid token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "7bf933f5-c4a3-4866-b07a-b37c654eb720",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "meow.meow.meow"
									}
								},
								"method": "DELETE",
								"header": [],
								"url": "{{HOST}}/devices/serenbox/{{SERENBOX_ID}}"
							},
							"response": []
						},
						{
							"name": "403 Forbidden",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b3ff5d76-2685-4cdb-b137-b6172cee6e41",
										"exec": [
											"pm.test(\"Reject if access token doesn't match SerenBox's userId\", () => {\r",
											"    pm.response.to.have.status(403);\r",
											"    pm.expect(pm.response.json()).to.haveOwnProperty(\"message\", \"Forbidden\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "3ec7af12-2def-45a7-90e2-cffb75e42551",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{SECOND_ACCESS_TOKEN}}"
									}
								},
								"method": "DELETE",
								"header": [],
								"url": "{{HOST}}/devices/serenbox/{{SERENBOX_ID}}"
							},
							"response": []
						},
						{
							"name": "404 SerenBox not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a018bf93-7dd6-4f73-9a50-a14b8da276f2",
										"exec": [
											"pm.test(\"Reject if SerenBox not found\", () => {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.expect(pm.response.json()).to.haveOwnProperty(\"message\", \"SerenBox not found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "44783afb-2f0f-4d0e-b121-dea037dcef6c",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": "{{HOST}}/devices/serenbox/NOTFOUNDDDDD"
							},
							"response": []
						},
						{
							"name": "200 Existing SerenBox",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1880b8a1-7750-4084-8b61-323eb6e4d996",
										"exec": [
											"pm.test(\"Delete an existing SerenBox\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"    const res = pm.response.json();\r",
											"\r",
											"    pm.expect(res).to.have.keys(\r",
											"        \"credentials\",\r",
											"        \"name\",\r",
											"        \"id\",\r",
											"        \"userId\",\r",
											"        \"added\",\r",
											"        \"slotAId\",\r",
											"        \"slotBId\",\r",
											"        \"image_name\",\r",
											"        \"ip_address\"\r",
											"    );\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "f04d24c4-7633-47a2-9b56-3b0807e9b440",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": "{{HOST}}/devices/serenbox/{{SERENBOX_ID}}"
							},
							"response": []
						}
					],
					"id": "1a41d2c9-e2d8-4b33-95ea-e62332bc77a8"
				},
				{
					"name": "[DEPRECATED] Get SerenBox status",
					"item": [
						{
							"name": "200 Available SerenBox",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ae8433b5-368a-4f78-baf8-52476b23d339",
										"exec": [
											"pm.test(\"Return an available existing SerenBox\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"    const res = pm.response.json();\r",
											"\r",
											"    pm.expect(res).to.have.keys(\r",
											"        \"credentials\",\r",
											"        \"name\",\r",
											"        \"id\",\r",
											"        \"userId\",\r",
											"        \"added\",\r",
											"        \"slotAId\",\r",
											"        \"slotBId\",\r",
											"        \"image_name\",\r",
											"        \"ip_address\"\r",
											"    );\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "e93050b3-1bee-479f-9d4a-dba5d5d721c4",
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{HOST}}/devices/serenbox/{{SERENBOX_ID}}/status"
							},
							"response": []
						},
						{
							"name": "401 Invalid Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ad79d0ba-e1e7-42d8-b8df-6b0eaf515601",
										"exec": [
											"pm.test(\"Reject if token is invalid\", () => {\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.expect(pm.response.json()).to.haveOwnProperty(\"message\", \"Invalid token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "4cd6ab49-0148-4f46-ae49-838e92f22b18",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "meow.meow.meow"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{HOST}}/devices/serenbox/{{SERENBOX_ID}}/status"
							},
							"response": []
						},
						{
							"name": "403 Forbidden",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1afca06c-69c1-478f-9717-88f336e75af7",
										"exec": [
											"pm.test(\"Reject if access token doesn't match SerenBox's userId\", () => {\r",
											"    pm.response.to.have.status(403);\r",
											"    pm.expect(pm.response.json()).to.haveOwnProperty(\"message\", \"Forbidden\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "1ce67332-05de-4fe9-8939-ba1e1287a3a4",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{SECOND_ACCESS_TOKEN}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{HOST}}/devices/serenbox/{{SERENBOX_ID}}/status"
							},
							"response": []
						},
						{
							"name": "404 Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fc832d9d-80b7-4061-90dd-76b2fd9d1c56",
										"exec": [
											"pm.test(\"Reject if SerenBox not found\", () => {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.expect(pm.response.json()).to.haveOwnProperty(\"message\", \"SerenBox not found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "fbcdf2fc-d706-4dce-b51f-fc52d11ddd98",
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{HOST}}/devices/serenbox/MEOWMEOWMOEMOMOWMOW/status"
							},
							"response": []
						},
						{
							"name": "503 SerenBox unavailable",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4db75d5d-80ab-4cea-ab2e-b71ce4934a57",
										"exec": [
											"pm.test(\"Reject if SerenBox unavailable\", () => {\r",
											"    pm.response.to.have.status(503);\r",
											"    pm.expect(pm.response.json()).to.haveOwnProperty(\"message\", \"SerenBox unavailable\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "d471a2b6-0bda-4a2d-8a41-ff60c5310000",
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{HOST}}/devices/serenbox/{{SERENBOX_UNAV_ID}}/status"
							},
							"response": []
						}
					],
					"id": "7a33e414-eadd-4e8d-b183-d9339752a480",
					"description": "Use \"Get SerenBox slot status\" folder instead"
				}
			],
			"id": "95697787-dcde-4e45-bce8-a3a78277ba69",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "70a2e472-ce21-41a9-b311-85fd03085bc8",
						"type": "text/javascript",
						"exec": [
							"const secondUserCreds = {",
							"    email: \"test_second_user@test.com\",",
							"    username: \"test_second_user\",",
							"    password: \"12345678\"",
							"};",
							"",
							"pm.sendRequest(",
							"    {",
							"        method: \"POST\",",
							"        url: `${pm.environment.get(\"HOST\")}/users`,",
							"        body: {",
							"            mode: \"raw\",",
							"            raw: JSON.stringify(secondUserCreds)",
							"        },",
							"        header: {",
							"            \"Content-Type\": \"application/json\"",
							"        }",
							"    },",
							"    function (err, response) {",
							"        if (err) {",
							"            console.log(err);",
							"        } else {",
							"            const res = response.json();",
							"",
							"            if (res.accessToken && res.userId) {",
							"                console.log(\"Registered User\");",
							"",
							"                pm.environment.set(\"SECOND_ACCESS_TOKEN\", res.accessToken);",
							"                pm.environment.set(\"SECOND_USER_ID\", res.userId);",
							"            } else {",
							"                pm.sendRequest(",
							"                    {",
							"                        method: \"POST\",",
							"                        url: `${pm.environment.get(\"HOST\")}/users/login`,",
							"                        body: {",
							"                            mode: \"raw\",",
							"                            raw: JSON.stringify(secondUserCreds)",
							"                        },",
							"                        header: {",
							"                            \"Content-Type\": \"application/json\"",
							"                        }",
							"                    },",
							"                    (err, response) => {",
							"                        console.log(\"Logged In\");",
							"                        if (err) {",
							"                            console.log(err);",
							"                        } else {",
							"                            const res = response.json();",
							"                            if (res.status) return console.log(res);",
							"",
							"                            pm.environment.set(",
							"                                \"SECOND_ACCESS_TOKEN\",",
							"                                res.accessToken",
							"                            );",
							"                            pm.environment.set(\"SECOND_USER_ID\", res.userId);  ",
							"                        }",
							"                    }",
							"                );",
							"            }",
							"        }",
							"    }",
							");",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "c0a36980-8175-4f76-bdde-9d717890cd9a",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "User Emotions API",
			"item": [
				{
					"name": "Analyze user's emotion",
					"item": [
						{
							"name": "201 Successfully analyzed user emotion",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4399bc12-6973-410a-9edc-e0db9dbaf4e2",
										"exec": [
											"pm.test(\"Successfully analyzed user emotions\", () => {\r",
											"    pm.response.to.have.status(201);\r",
											"    const res = pm.response.json();\r",
											"\r",
											"    pm.expect(res).to.have.keys(\r",
											"        \"id\",\r",
											"        \"userId\",\r",
											"        \"created_time\",\r",
											"        \"user_photo\",\r",
											"        \"energetic\",\r",
											"        \"relax\",\r",
											"        \"serenBoxSessionId\"\r",
											"    );\r",
											"\r",
											"    pm.expect(res.user_photo).to.be.a(\"string\").and.match(/^https:\\/\\/storage\\.googleapis\\.com\\/serena-app-storage/);\r",
											"\r",
											"    pm.expect(res.energetic).to.have.keys(\r",
											"        \"anger\",\r",
											"        \"fear\",\r",
											"        \"surprise\",\r",
											"        \"total\"\r",
											"    );\r",
											"\r",
											"    pm.expect(res.relax).to.have.keys(\r",
											"        \"disgust\",\r",
											"        \"joy\",\r",
											"        \"neutral\",\r",
											"        \"sadness\",\r",
											"        \"total\"\r",
											"    );\r",
											"\r",
											"    pm.environment.set(\"EMOTION_ID\", res.id);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "62125426-3406-4cd2-9a2c-8aa683929e69",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "image",
											"type": "file",
											"id": 0,
											"fileUploadError": "",
											"src": [
												"C:\\Users\\emuia\\OneDrive\\Gambar\\reyhan.jpg"
											]
										},
										{
											"key": "serenBoxSessionId",
											"value": "{{SESSION_ID}}",
											"type": "text",
											"id": 1
										}
									]
								},
								"url": "{{HOST}}/users/{{USER_ID}}/emotions/detect"
							},
							"response": []
						},
						{
							"name": "400 Missing image",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "122d8f96-d363-4040-93c6-6ff437ed2afc",
										"exec": [
											"pm.test(\"Reject if missing image\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.expect(pm.response.json()).to.haveOwnProperty(\"message\", \"Missing image\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "9ac03d4e-91cd-4d1d-a177-82741f8008e0",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"url": "{{HOST}}/users/{{USER_ID}}/emotions/detect"
							},
							"response": []
						},
						{
							"name": "401 Invalid Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "38662250-596f-4ec9-97ae-dc73310a9690",
										"exec": [
											"pm.test(\"Reject if token is invalid\", () => {\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.expect(pm.response.json()).to.haveOwnProperty(\"message\", \"Invalid token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "ff6bf619-85a5-49c4-a029-cda01e5f9d01",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "meow.meow.meow"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "image",
											"type": "file",
											"id": 0,
											"fileUploadError": "",
											"src": [
												"reyhan-smile.jpg"
											]
										}
									]
								},
								"url": "{{HOST}}/users/{{USER_ID}}/emotions/detect"
							},
							"response": []
						},
						{
							"name": "403 Forbidden",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "de8d48da-e96c-45a8-8bb9-96872ec51f5b",
										"exec": [
											"pm.test(\"Reject if access token doesn't match userId\", () => {\r",
											"    pm.response.to.have.status(403);\r",
											"    pm.expect(pm.response.json()).to.haveOwnProperty(\"message\", \"Forbidden\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "53157bf6-3ce9-4a64-9e89-3f67cef8873d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{SECOND_ACCESS_TOKEN}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "image",
											"type": "file",
											"id": 0,
											"fileUploadError": "",
											"src": [
												"reyhan-smile.jpg"
											]
										}
									]
								},
								"url": "{{HOST}}/users/{{USER_ID}}/emotions/detect"
							},
							"response": []
						},
						{
							"name": "404 User not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1214c6f1-f0e2-4cec-9266-bbd06f836857",
										"exec": [
											"pm.test(\"Reject if user not found\", () => {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.expect(pm.response.json()).to.haveOwnProperty(\"message\", \"User not found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "4b495e34-213c-4ae0-905c-e50de2ce70a3",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "image",
											"type": "file",
											"id": 0,
											"fileUploadError": "",
											"src": [
												"reyhan-smile.jpg"
											]
										}
									]
								},
								"url": "{{HOST}}/users/NOTFOUNDDDD/emotions/detect"
							},
							"response": []
						}
					],
					"id": "4c418a82-89f3-4a1f-bfb5-be9c9c56d7b5"
				},
				{
					"name": "Get user emotion",
					"item": [
						{
							"name": "200 Get user emotion",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6b01d810-076c-4c97-8183-f3c67aecfe7a",
										"exec": [
											"pm.test(\"Return one user emotion\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"    const res = pm.response.json();\r",
											"\r",
											"    pm.expect(res).to.have.keys(\r",
											"        \"id\",\r",
											"        \"userId\",\r",
											"        \"created_time\",\r",
											"        \"user_photo\",\r",
											"        \"energetic\",\r",
											"        \"relax\",\r",
											"        \"serenBoxSessionId\"\r",
											"    );\r",
											"\r",
											"    pm.expect(res.user_photo).to.be.a(\"string\").and.match(/^https:\\/\\/storage\\.googleapis\\.com\\/serena-app-storage/);\r",
											"\r",
											"    pm.expect(res.energetic).to.have.keys(\r",
											"        \"anger\",\r",
											"        \"fear\",\r",
											"        \"surprise\",\r",
											"        \"total\"\r",
											"    );\r",
											"\r",
											"    pm.expect(res.relax).to.have.keys(\r",
											"        \"disgust\",\r",
											"        \"joy\",\r",
											"        \"neutral\",\r",
											"        \"sadness\",\r",
											"        \"total\"\r",
											"    );\r",
											"\r",
											"    pm.environment.set(\"EMOTION_ID\", res.id);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "686bfe15-41ec-4361-b0ed-0e60bae0c1bc",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{HOST}}/users/{{USER_ID}}/emotions/{{EMOTION_ID}}"
							},
							"response": []
						},
						{
							"name": "401 Invalid Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3167a89f-14eb-481f-8497-0a3a7c7f902c",
										"exec": [
											"pm.test(\"Reject if token is invalid\", () => {\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.expect(pm.response.json()).to.haveOwnProperty(\"message\", \"Invalid token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "1084a28f-bebf-4efb-88f7-775c7710cca6",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "meow.meow.meow"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{HOST}}/users/{{USER_ID}}/emotions/{{EMOTION_ID}}"
							},
							"response": []
						},
						{
							"name": "403 Forbidden",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9a9926bf-c599-406d-a027-4b67da5a4bd6",
										"exec": [
											"pm.test(\"Reject if access token doesn't match userId\", () => {\r",
											"    pm.response.to.have.status(403);\r",
											"    pm.expect(pm.response.json()).to.haveOwnProperty(\"message\", \"Forbidden\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "7fb8691c-a756-4981-81ab-49f0dada830c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{SECOND_ACCESS_TOKEN}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{HOST}}/users/{{USER_ID}}/emotions/{{EMOTION_ID}}"
							},
							"response": []
						},
						{
							"name": "404 User not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "11bfaf0f-1b66-44f3-8ff2-4c6e0781e45f",
										"exec": [
											"pm.test(\"Reject if user not found\", () => {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.expect(pm.response.json()).to.haveOwnProperty(\"message\", \"User not found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "7bb9fae9-1c7b-441e-b8f0-3ddb808c48c9",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{HOST}}/users/NOTFOUNDDDD/emotions/{{EMOTION_ID}}"
							},
							"response": []
						},
						{
							"name": "404 Emotion not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "11bfaf0f-1b66-44f3-8ff2-4c6e0781e45f",
										"exec": [
											"pm.test(\"Reject if emotion result not found\", () => {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.expect(pm.response.json()).to.haveOwnProperty(\"message\", \"Emotion result not found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "201a3085-b87e-4763-8c9b-e0d58ea8627f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{HOST}}/users/{{USER_ID}}/emotions/NOTFOUNDDDD"
							},
							"response": []
						}
					],
					"id": "28059a96-7582-4e36-af0d-4d506ba5315b"
				},
				{
					"name": "List user emotions",
					"item": [
						{
							"name": "200 List user's emotions",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a1c88ff8-e6bd-432e-90d6-336c7e9abb68",
										"exec": [
											"\r",
											"pm.test(\"List user's emotion results\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"    const res = pm.response.json();\r",
											"\r",
											"    pm.expect(res).to.be.a(\"array\");\r",
											"    res.forEach(res => {\r",
											"        pm.expect(res).to.have.keys(\r",
											"            \"id\",\r",
											"            \"userId\",\r",
											"            \"created_time\",\r",
											"            \"user_photo\",\r",
											"            \"energetic\",\r",
											"            \"relax\",\r",
											"            \"serenBoxSessionId\"\r",
											"        );\r",
											"\r",
											"        pm.expect(res.user_photo).to.be.a(\"string\").and.match(/^https:\\/\\/storage\\.googleapis\\.com\\/serena-app-storage/);\r",
											"\r",
											"        pm.expect(res.energetic).to.have.keys(\"anger\", \"fear\", \"surprise\", \"total\");\r",
											"\r",
											"        pm.expect(res.relax).to.have.keys(\r",
											"            \"disgust\",\r",
											"            \"joy\",\r",
											"            \"neutral\",\r",
											"            \"sadness\",\r",
											"            \"total\"\r",
											"        );\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "122cb2c9-2237-4dfc-bd91-576d86d89b3b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{HOST}}/users/{{USER_ID}}/emotions"
							},
							"response": []
						},
						{
							"name": "401 Invalid Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4d2193ab-8e55-404b-a5e3-e955009f993d",
										"exec": [
											"pm.test(\"Reject if token is invalid\", () => {\r",
											"    pm.response.to.have.status(401);\r",
											"    pm.expect(pm.response.json()).to.haveOwnProperty(\"message\", \"Invalid token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "a6c8c906-bd9b-4aa6-8e8e-f9fcd0f2d04c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "meow.meow.meow"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{HOST}}/users/{{USER_ID}}/emotions"
							},
							"response": []
						},
						{
							"name": "403 Forbidden",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9a9926bf-c599-406d-a027-4b67da5a4bd6",
										"exec": [
											"pm.test(\"Reject if access token doesn't match userId\", () => {\r",
											"    pm.response.to.have.status(403);\r",
											"    pm.expect(pm.response.json()).to.haveOwnProperty(\"message\", \"Forbidden\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "a5b0e434-1cb7-4adb-b9d0-ae1720898366",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{SECOND_ACCESS_TOKEN}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{HOST}}/users/{{USER_ID}}/emotions"
							},
							"response": []
						},
						{
							"name": "404 User not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "11bfaf0f-1b66-44f3-8ff2-4c6e0781e45f",
										"exec": [
											"pm.test(\"Reject if user not found\", () => {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.expect(pm.response.json()).to.haveOwnProperty(\"message\", \"User not found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "f18afefb-c841-43a2-9b90-76d817bb70d9",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{HOST}}/users/NOTFOUNDDDD/emotions/{{EMOTION_ID}}"
							},
							"response": []
						}
					],
					"id": "123a7beb-58d0-4633-93ea-b9990f8bb04d"
				},
				{
					"name": "Call Serena Emotion Detector directly",
					"item": [
						{
							"name": "200 Analyze emotion",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8b12a40b-ef9c-4c7e-9242-86637238c186",
										"exec": [
											"pm.test(\"Return emotion analysis results\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"    const res = pm.response.json();\r",
											"\r",
											"    pm.expect(res).to.have.keys(\r",
											"        \"angry\",\r",
											"        \"fear\",\r",
											"        \"surprise\",\r",
											"        \"disgust\",\r",
											"        \"happy\",\r",
											"        \"neutral\",\r",
											"        \"sad\"\r",
											"    );\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "d54192e8-c4f4-4714-897d-7cced8c4372c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "image",
											"type": "file",
											"id": 0,
											"fileUploadError": "",
											"src": [
												"C:\\Users\\emuia\\OneDrive\\Gambar\\reyhan (Custom).jpg"
											]
										}
									]
								},
								"url": "{{HOST}}/serena-emotion-detector/detect"
							},
							"response": []
						},
						{
							"name": "400 Missing image",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "85105936-e0b1-4969-86a1-88a2f4fb8a35",
										"exec": [
											"pm.test(\"Reject if missing image\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.expect(pm.response.json()).to.haveOwnProperty(\"message\", \"Missing image\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "c3111430-2413-435e-a109-745b6157b4e7",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"id": 0,
											"fileUploadError": "",
											"src": [
												"C:\\Users\\emuia\\OneDrive\\Gambar\\reyhan.jpg"
											],
											"disabled": true
										}
									]
								},
								"url": "{{HOST}}/serena-emotion-detector/detect"
							},
							"response": []
						}
					],
					"id": "2f6acaf9-c543-436c-a2d5-33844407345a"
				}
			],
			"id": "5886007b-a442-4cb3-a230-0f746f386f19"
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": {
			"token": "{{ACCESS_TOKEN}}"
		}
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "f960c102-7d92-4da3-a670-a8f02924a780",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "2cf75f6b-c81f-4693-bdc3-f4ed571ae30f",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}