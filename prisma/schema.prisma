// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "./ERD.pdf"
  theme    = "forest"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String              @id @default(uuid())
  email              String              @unique
  password           String
  username           String              @unique
  image_name         String              @default("assets/placeholders/user_profile_photo.jpeg")
  SerenBoxes         SerenBox[]
  UserEmotionResults UserEmotionResult[]

  @@map("user")
}

model SerenBox {
  id               String            @id @default(uuid())
  credentials      String            @unique
  ip_address       String?
  name             String
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String
  image_name       String            @default("assets/placeholders/serenbox_mockup_transparent.png")
  added            DateTime          @default(now())
  slotA            SerenBoxSlot?     @relation("slotA", fields: [slotAId], references: [id])
  slotAId          String?           @unique
  slotB            SerenBoxSlot?     @relation("slotB", fields: [slotBId], references: [id])
  slotBId          String?           @unique
  SerenBoxSessions SerenBoxSession[]

  @@map("serenbox")
}

enum SerenBoxSlots {
  A
  B
}

enum SerenBoxLabels {
  ENERGETIC
  RELAX
}

model SerenBoxSlot {
  id                     String            @id @default(uuid())
  name                   String
  slot                   SerenBoxSlots
  label                  SerenBoxLabels
  capacity_ml            Int
  current_capacity_ml    Float
  is_active              Boolean           @default(false)
  usedByA                SerenBox?         @relation("slotA")
  usedByB                SerenBox?         @relation("slotB")
  slotAUsedDuringSession SerenBoxSession[] @relation("slotA")
  slotBUsedDuringSession SerenBoxSession[] @relation("slotB")
  image_url              String            @default("https://storage.googleapis.com/serena-app-storage/assets/placeholders/essential_oil_slot.png")

  @@map("serenboxslot")
}

enum SerenBoxDetectionModes {
  INTERVAL
  ONCE
}

enum SerenBoxDiffusionModes {
  MATCH_MOOD
  OPPOSITE_MOOD
  AUTO
}

model SerenBoxSession {
  id                String                  @id @default(uuid())
  serenBox          SerenBox                @relation(fields: [serenBoxId], references: [id], onDelete: Cascade)
  serenBoxId        String
  duration_minutes  Int?                    @default(10)
  detection_mode    SerenBoxDetectionModes? @default(INTERVAL)
  diffusion_option  SerenBoxDiffusionModes? @default(MATCH_MOOD)
  start_time        DateTime                @default(now())
  end_time          DateTime?
  is_running        Boolean                 @default(true)
  slotA             SerenBoxSlot?           @relation("slotA", fields: [slotAId], references: [id])
  slotAId           String?
  slotB             SerenBoxSlot?           @relation("slotB", fields: [slotBId], references: [id])
  slotBId           String?
  UserEmotionResult UserEmotionResult[]

  @@map("serenboxsession")
}

model UserEmotionResult {
  id                String           @id @default(uuid())
  user              User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String
  created_time      DateTime         @default(now())
  neutral           Float
  joy               Float
  sadness           Float
  disgust           Float
  surprise          Float
  anger             Float
  fear              Float
  user_photo        String
  serenBoxSession   SerenBoxSession? @relation(fields: [serenBoxSessionId], references: [id])
  serenBoxSessionId String?

  @@map("useremotionresult")
}

enum SerenPlaceProductTypes {
  OIL
  DEVICE
}

model SerenPlaceProduct {
  id          String                 @id @default(uuid())
  name        String
  price_idr   Int
  description String
  stock       Int
  image_name  String                 @default("assets/placeholders/essential_oil_slot.png")
  type        SerenPlaceProductTypes @default(OIL)

  @@map("serenplaceproduct")
}
