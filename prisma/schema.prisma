// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "./ERD.pdf"
  theme    = "forest"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String                @id @default(uuid())
  email               String                @unique
  password            String
  username            String                @unique
  // TODO add default values for images
  image_name          String?               @default("")
  SerenBoxes          SerenBox[]
  UserEmotionResults  UserEmotionResult[]
  MusicRecommendation MusicRecommendation[]

  @@map("user")
}

model SerenBox {
  id               String            @id @default(uuid())
  credentials      String
  name             String
  user             User              @relation(fields: [userId], references: [id])
  userId           String
  image_name       String?           @default("")
  added            DateTime          @default(now())
  slotA            SerenBoxSlot      @relation("slotA", fields: [slotAId], references: [id])
  slotAId          String            @unique
  slotB            SerenBoxSlot      @relation("slotB", fields: [slotBId], references: [id])
  slotBId          String            @unique
  SerenBoxSessions SerenBoxSession[]

  @@map("serenbox")
}

enum SerenBoxSlots {
  A
  B
}

enum SerenBoxLabels {
  ENERGETIC
  RELAX
}

model SerenBoxSlot {
  id                  String         @id @default(uuid())
  name                String
  slot                SerenBoxSlots
  label               SerenBoxLabels
  capacity_ml         Int
  current_capacity_ml Float
  is_active           Boolean        @default(false)
  usedByA             SerenBox?      @relation("slotA")
  usedByB             SerenBox?      @relation("slotB")

  @@map("serenboxslot")
}

enum SerenBoxDetectionModes {
  INTERVAL
  ONCE
}

enum SerenBoxDiffusionModes {
  MATCH_MOOD
  OPPOSITE_MOOD
  AUTO
}

model SerenBoxSession {
  id               String                  @id @default(uuid())
  serenBox         SerenBox                @relation(fields: [serenBoxId], references: [id])
  serenBoxId       String
  duration_minutes Int?                    @default(10)
  detection_mode   SerenBoxDetectionModes? @default(INTERVAL)
  diffusion_option SerenBoxDiffusionModes? @default(MATCH_MOOD)
  start_time       DateTime                @default(now())
  end_time         DateTime?
  is_running       Boolean                 @default(true)

  @@map("serenboxsession")
}

model UserEmotionResult {
  id           String   @id @default(uuid())
  user         User     @relation(fields: [userId], references: [id])
  userId       String
  created_time DateTime @default(now())
  neutral      Decimal
  joy          Decimal
  sadness      Decimal
  disgust      Decimal
  surprise     Decimal
  anger        Decimal
  fear         Decimal
  user_photo   String

  @@map("useremotionresult")
}

enum SerenPlaceProductTypes {
  OIL
  DEVICE
}

model SerenPlaceProduct {
  id          String                 @id @default(uuid())
  name        String
  price_idr   Int
  description String
  stock       Int
  image_name  String?                @default("")
  type        SerenPlaceProductTypes @default(OIL)

  @@map("serenplaceproduct")
}

model MusicRecommendation {
  id           String  @id @default(uuid())
  user         User    @relation(fields: [userId], references: [id])
  userId       String
  title        String
  artist       String
  album        String
  release_year Int
  cover_image  String?
  preview_link String?

  @@map("musicrecommendation")
}
